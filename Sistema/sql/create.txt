-- Database Locacar
-- DROP DATABASE LOCACAR;
CREATE DATABASE LOCACAR;
USE LOCACAR;

CREATE TABLE Cliente(
	id_cliente INT AUTO_INCREMENT,
    nome_cliente VARCHAR(80) UNIQUE NOT NULL,
    telefone_cliente VARCHAR(15) NOT NULL, 
    PRIMARY KEY (id_cliente)
);

CREATE TABLE Tipo(
	nome_tipo VARCHAR(30) CHECK (nome_tipo IN ('COMPACTO', 'MEDIO','GRANDE', 'SUV', 'CAMINHAO')),
    valor_diario DECIMAL(10,2) NOT NULL,
    valor_semanal DECIMAL(10,2) NOT NULL, 
    multa_diaria DECIMAL(10,2) NOT NULL,
    multa_semanal DECIMAL(10,2) NOT NULL, 
    PRIMARY KEY (nome_tipo)
);

CREATE TABLE Carro(
	id_carro INT AUTO_INCREMENT,
	tipo VARCHAR(30),
	marca VARCHAR(30) NOT NULL,
	modelo VARCHAR(30) NOT NULL,
    ano INT NOT NULL,
    PRIMARY KEY (id_carro),
    FOREIGN KEY (tipo) REFERENCES Tipo(nome_tipo)
    ON UPDATE CASCADE
    ON DELETE RESTRICT -- empedira a deleção do tipo em caso de a ver algum carro cadastrado com este tipo
);

CREATE TABLE Aluguel(
	data_inicial TIMESTAMP,
	id_cliente INT,
    id_carro INT,
    estado_aluguel VARCHAR(10) 
    CHECK (estado_aluguel IN ('ATIVO', 'AGENDADO','FINALIZADO', 'PENDENTE')) NOT NULL,
    NumeroDeDias INT,
    valor_devido NUMERIC(10,2),
    data_retorno TIMESTAMP,
    relatorio VARCHAR(300) CHECK (LENGTH(relatorio) <= 300), -- Usei a cláusula CHECK para impor o limite de caracteres
    PRIMARY KEY (data_inicial, id_cliente, id_carro),
    FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente)
    ON UPDATE CASCADE
    ON DELETE RESTRICT, -- empedira a deleção do cliente em caso de a ver algum aluguel cadastrado com o id dele
	FOREIGN KEY (id_carro) REFERENCES Carro(id_carro)
    ON UPDATE RESTRICT -- Não permite update de carros cadastrados em um aluguel 
    ON DELETE RESTRICT -- Não permite a deleção do carro se ele estiver referenciado aqui
);


-- DELIMITER //
-- CREATE TRIGGER ImpedirInsercaoDataPassada
-- BEFORE INSERT ON Aluguel FOR EACH ROW
-- BEGIN
--    IF NEW.estado_aluguel = 'AGENDADO' AND NEW.data_inicial < NOW() THEN
--        SIGNAL SQLSTATE '45000'
--        SET MESSAGE_TEXT = 'Não é permitido cadastrar aluguéis com datas passadas quando o estado é "Agendado".';
--    END IF;
-- END;
-- //
-- DELIMITER ;

-- DROP TRIGGER ImpedirInsercaoDataPassada;

-- Trigger para impedir a alteração do atributo de data_inicial após o cadastro
-- DELIMITER //
-- CREATE TRIGGER ImpedirAtualizacaoDataAluguel
-- BEFORE UPDATE ON Aluguel FOR EACH ROW
-- BEGIN
--    IF NEW.data_inicial != OLD.data_inicial THEN
--        SIGNAL SQLSTATE '45000'
--        SET MESSAGE_TEXT = 'Não é permitido alterar o atributo de data_inicial após o cadastro.';
--    END IF;
-- END;
-- //
-- DELIMITER ;

-- DROP TRIGGER ImpedirAtualizacaoDataAluguel;

DELIMITER //

CREATE TRIGGER ImpedirUpdateAluguelFinalizado
BEFORE UPDATE ON Aluguel FOR EACH ROW
BEGIN
    DECLARE estado_aluguel VARCHAR(10);
    DECLARE valor_devido NUMERIC(10,2);

    -- Consulte o estado do aluguel associado a este Aluguel
    SELECT estado_aluguel, valor_devido INTO estado_aluguel, valor_devido
    FROM Aluguel
    WHERE data_inicial = OLD.data_inicial AND id_cliente = OLD.id_cliente;

    -- Verifique se o estado_aluguel é "FINALIZADO"
    IF estado_aluguel = 'FINALIZADO' AND valor_devido != NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Não é permitido update carros associados a aluguéis com estado "FINALIZADO".';
    END IF;
END;
//

DELIMITER //

CREATE FUNCTION CalcularDataTerminoAluguel(data_inicial_param TIMESTAMP, numero_de_dias INT) RETURNS DATETIME
DETERMINISTIC
BEGIN
    DECLARE data_termino TIMESTAMP;

    -- Calcula a data de término adicionando o número de dias à data de início
    SET data_termino = DATE_ADD(data_inicial_param, INTERVAL numero_de_dias DAY);

    RETURN data_termino;
END;
//

DELIMITER ;


-- DELIMITER //

-- CREATE FUNCTION CarrosDisponiveisApartirDeData(data_inicial_param DATETIME)
-- RETURNS VARCHAR(255)
-- READS SQL DATA
-- BEGIN
--    DECLARE carros_disponiveis VARCHAR(255) DEFAULT '';
--    DECLARE data_termino TIMESTAMP;
--
--    -- Crie sua lógica para buscar carros disponíveis aqui e concatene os resultados em carros_disponiveis
	
    -- Exemplo de lógica simples:
--    SELECT GROUP_CONCAT(CONCAT(id_carro) SEPARATOR '; ')
--    INTO carros_disponiveis
--    FROM Carro
--    WHERE id_carro NOT IN (
--        SELECT DISTINCT id_carro
--        FROM RefereCarros RC
--        INNER JOIN Aluguel A ON RC.data_inicial = A.data_inicial AND RC.id_cliente = A.id_cliente
--        WHERE A.estado_aluguel IN ('ATIVO', 'AGENDADO') AND A.data_inicial <= (SELECT CalcularDataTerminoAluguel('2023-09-10', 7)) AND estado_carro IN ('DEVOLVIDO','ALUGADO') 
--    );

--    RETURN carros_disponiveis;
-- END;
-- //

-- DELIMITER ;

DELIMITER //

CREATE PROCEDURE atualizar_estado_alugueis()
BEGIN
    -- Atualiza o estado de alugueis de "AGENDADO" para "ATIVO"
    UPDATE Aluguel
    SET estado_aluguel = 'ATIVO'
    WHERE estado_aluguel = 'AGENDADO' AND data_inicial <= NOW();

    -- Atualiza estado do Aluguel
    UPDATE Aluguel
    SET estado_aluguel = 'PENDENTE'
    WHERE estado_aluguel = 'ATIVO' AND data_retorno <= NOW();
END;
//

DELIMITER ;

DELIMITER //

CREATE TRIGGER ImpedirDELETECarroComAluguel
BEFORE DELETE ON Carro FOR EACH ROW
BEGIN
    DECLARE carro_id INT;
    
    -- Verifica se o carro está associado a aluguéis ativos
    SELECT id_carro INTO carro_id
    FROM Aluguel
    WHERE id_carro = OLD.id_carro AND estado_aluguel IN ('ATIVO', 'AGENDADO','PENDENTE');
    
    IF carro_id IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Não é permitido excluir um carro associado a aluguéis ativos.';
    END IF;
END;
//

DELIMITER ;

DELIMITER //

CREATE TRIGGER ImpedirUPDATECarroComAluguel
BEFORE UPDATE ON Carro FOR EACH ROW
BEGIN
    DECLARE carro_id INT;
    
    -- Verifica se o carro está associado a aluguéis ativos
    SELECT id_carro INTO carro_id
    FROM Aluguel
    WHERE id_carro = OLD.id_carro AND estado_aluguel IN ('ATIVO', 'AGENDADO','PENDENTE');
    
    IF carro_id IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Não é permitido editar um carro associado a aluguéis ativos.';
    END IF;
END;
//

DELIMITER ;


SELECT @@GLOBAL.transaction_isolation, @transaction_isolation;

